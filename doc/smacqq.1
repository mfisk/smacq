.\" This -*- nroff -*- file has been generated from
.\" DocBook SGML with docbook-to-man on Debian GNU/Linux.
...\"
...\"	transcript compatibility for postscript use.
...\"
...\"	synopsis:  .P! <file.ps>
...\"
.de P!
\\&.
.fl			\" force out current output buffer
\\!%PB
\\!/showpage{}def
...\" the following is from Ken Flowers -- it prevents dictionary overflows
\\!/tempdict 200 dict def tempdict begin
.fl			\" prolog
.sy cat \\$1\" bring in postscript file
...\" the following line matches the tempdict above
\\!end % tempdict %
\\!PE
\\!.
.sp \\$2u	\" move below the image
..
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
'\" t 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n  
.TH "smacqq" "1" 
.SH "NAME" 
smacqq \(em query tool using SMACQ 
.SH "DESCRIPTION" 
.PP 
"Smacqq" is an extensible tool for performing queries on streams of data. 
Users with a familiarity of SQL will immediately be comfortable using the 
basic features of the system.  However, there are additional 
object-relational and extensibility features that are described below. 
 
.PP 
The primary difference from standard databases, is that data is 
not stored in preloaded tables, but is instead produced by data 
source modules.  Also, the select operation does not 
automatically print fields.  If printable output is desired, use 
the \fBprint\fP command. 
 
.PP 
The following example prints the "srcip" and "dstip" fields from 
a stream of packets stored in a tcpdump-format file named "/tmp/dump": 
 
\f(CW	smacqq 'print srcip, dstip from pcapfile("/tmp/dump")' 
\fP  
Nested queries are also supported.  For example: 
 
\f(CW	print srcip, dstip from (uniq srcip, dstip from pcapfile("/tmp/dump")) 
\fP        
"Where" clauses are supported: 
 
\f(CW	print dstip from pcapfile("/tmp/dump") where srcip = 128.129.1.2 
\fP  
Aliasing with "as" is supported: 
 
\f(CW	print dstip, totalbytes from select dstip, sum(len) as totalbytes from pcapfile("/tmp/dump") 
\fP  
Extended relational algebra provides aggregate functions and the 
"group by" and "having" terms.  This syntax is supported, but with slightly 
different semantics.  For example, the following query would 
behave as it would in SQL: 
 
\f(CW	print dstip, sum(len) from pcapfile("/tmp/dump") group 
by dstip 
\fP  
but is also the same as: 
 
\f(CW	print dstip, sum from (groupby dstip, '--', sum, len from 
pcapfile("/tmp/dump")) 
\fP  
However the use of a function (such as "sum()") as one of the 
arguments will result in the "sum" module processing the data 
before the "print" module.  A module called in this way is 
expected to annotate the data object with a field of the same 
name as the function.  Thus, the sum field will be part of the 
object from now on.  Thus, it can also be used in subsequent 
arguments.  In addition, however, the module can cause other 
side-effects to the data.  Finally, functions can be used whether or 
not "group by" is used. 
 
 
.PP 
SMACQ is an extensible system that the user can add modules to. 
See the \fBsmacqp\fP(1) manpage for a detailed 
description of modules.  Many modules take flags which can be 
specified in quotes: 
 
\f(CW	print "-v", srcip, dstip from pcapfile("/tmp/dump") 
\fP\  
 
.SH "BUGS" 
.PP 
Joins are not yet supported.  They will be supported in multiple 
forms:  joins within a buffer window, joins between 
nondecreasing streams, etc. 
 
...\" created by instant / docbook-to-man, Sun 29 Dec 2002, 14:44 

%start queryline

%{
void yysmacql_error(char*);
     #define    yymaxdepth yysmacql_maxdepth
     #define    yyparse yysmacql_parse
     #define    yylex   yysmacql_lex
     //#define    yyerror yysmacql_error
     #define    yylval  yysmacql_lval
     #define    yychar  yysmacql_char
     #define    yydebug yysmacql_debug
     #define    yypact  yysmacql_pact
     #define    yyr1    yysmacql_r1
     #define    yyr2    yysmacql_r2
     #define    yydef   yysmacql_def
     #define    yychk   yysmacql_chk
     #define    yypgo   yysmacql_pgo
     #define    yyact   yysmacql_act
     #define    yyexca  yysmacql_exca
     #define yyerrflag yysmacql_errflag
     #define yynerrs    yysmacql_nerrs
     #define    yyps    yysmacql_ps
     #define    yypv    yysmacql_pv
     #define    yys     yysmacql_s
     #define    yy_yys  yysmacql_yys
     #define    yystate yysmacql_state
     #define    yytmp   yysmacql_tmp
     #define    yyv     yysmacql_v
     #define    yy_yyv  yysmacql_yyv
     #define    yyval   yysmacql_val
     #define    yylloc  yysmacql_lloc
     #define yyreds     yysmacql_reds
     #define yytoks     yysmacql_toks
     #define yylhs      yysmacql_yylhs
     #define yylen      yysmacql_yylen
     #define yydefred yysmacql_yydefred
     #define yydgoto    yysmacql_yydgoto
     #define yysindex yysmacql_yysindex
     #define yyrindex yysmacql_yyrindex
     #define yygindex yysmacql_yygindex
     #define yytable     yysmacql_yytable
     #define yycheck     yysmacql_yycheck
     #define yyname   yysmacql_yyname
     #define yyrule   yysmacql_yyrule

#include <smacq-parser.h>
#include <SmacqGraph.h>

static SmacqGraph * nullgraph = NULL;
SmacqGraph_ptr Graph;
extern int yylex();
%}
%defines

%type <graph> query from0 from where action fromwhere parenquery moreparenquery joinuntil
%type <group> group
%type <comp> having
%type <join_list> newjoin join joins

m4_include(grammer.ypp)

queryline: query YYSTOP	
	   { 
#ifdef DEBUG
	   	$1->print(stderr, 0); 
#endif
		Graph = $1;
		return 0;
	   }
	;

query: 
	action fromwhere group
           {
	   	$$ = $2;
		if ($3.args) {
			graph_join(&($$), newgroup($3, $1));
		} else {
			graph_join(&($$), $1);
		}
	   }
	| query '|' action where group
           {
	   	$$ = $1;
		graph_join(&($$), $4);
		if ($5.args) {
			graph_join(&($$), newgroup($5, $3));
		} else {
			graph_join(&($$), $3);
		}
	   }
        | WHERE boolean { $$ = optimize_bools($2); }
	;

fromwhere:
	from0 where 
	   { 
		$$=$1; 
		graph_join(&($$), $2); 
	   }
	| FROM newjoin ',' joins WHERE boolean 
	   {
		$2->append($4);
		$$ = joinlist2graph($2, optimize_bools($6));
	   }
	;

newjoin:
	parenquery word joinuntil 	{ $$ = new joinlist($2, $1, $3); }
	;

joinuntil:
	null 				{ $$ = nullgraph; }
	| UNTIL boolean 		{ $$ = optimize_bools($2); }
	;

join:
	newjoin
	| word joinuntil 	{ $$ = new joinlist($1, nullgraph, $2); }
	;

joins:
	join
 	| join ',' joins 
	   { 
		$$ = $1;
		$$->append($3); 
	   }
	;

from0: 
	from
	| null			{ $$ = nullgraph; }
	;

from:
	FROM action from0
           {
	   	$$ = $3;
		graph_join(&($$), $2);
	   }
	;

where: 
	null 			{ $$ = nullgraph; }
        | WHERE boolean 	{ $$ = optimize_bools($2); }
	;

group: 
	null 			{ $$.args = NULL; $$.having = NULL;}
	| GROUP BY args having 	{ $$.args = $3; $$.having = $4; }
	;

having: 
	null			{ $$ = NULL; }
	| HAVING boolean	{ $$ = $2; }
	;

action: parenquery 
	| function args 		{ $$ = newmodule($1, $2); }
	;

parenquery:
	'(' query ')'			{ $$ = $2; }
	| function '(' args ')'		{ $$ = newmodule($1, $3); }
	| function			{ $$ = newmodule($1, NULL); }
	| '(' parenquery '+' moreparenquery ')'
	   {
		$2->add_graph($4);
		$$ = $2;
	   }
	;

moreparenquery: 
	parenquery
	| parenquery '+' moreparenquery
	   {
		$1->add_graph($3);
		$$ = $1;
	   }
	;

%%

extern void yysmacql_scan_string(char*);

#ifndef SMACQ_OPT_NOPTHREADS
#ifdef PTHREAD_MUTEX_INITIALIZER
  static pthread_mutex_t local_lock = PTHREAD_MUTEX_INITIALIZER;
#else
  static pthread_mutex_t local_lock;
  #warning "No PTHREAD_MUTEX_INITIALIZER"
#endif
#endif

void yysmacql_error(char * msg) {
  fprintf(stderr, "%s near %s\n", msg, yytext-1);
}


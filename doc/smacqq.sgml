<!doctype refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
  <!ENTITY docbook "<productname>DocBook</productname>">
  <!ENTITY sgml    "<abbrev>SGML</abbrev>">
]>

<refentry>
  <refentryinfo>
    <address>
      <email>mfisk@lanl.gov</email>
    </address>
    <author>
      <firstname>Mike</firstname>
      <surname>Fisk</surname>
    </author>
    <date>$Date: 2002/12/29 22:55:50 $</date>
  </refentryinfo>
  <refmeta>
    <refentrytitle>smacqq</refentrytitle>
    <manvolnum>1</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>smacqq</refname>
    <refpurpose>query tool using SMACQ</refpurpose>
  </refnamediv>
  <refsect1>
    <title>DESCRIPTION</title>

    <para>
      "Smacqq" is an extensible tool for performing queries on streams of data.
       Users with a familiarity of SQL will immediately be comfortable using the
      basic features of the system.  However, there are additional
      object-relational and extensibility features that are described below.
    </para>

    <para>
      The primary difference from standard databases, is that data is
      not stored in preloaded tables, but is instead produced by data
      source modules.  Also, the select operation does not
      automatically print fields.  If printable output is desired, use
      the <command>print</command> command.
    </para>

    <para>
      The following example prints the "srcip" and "dstip" fields from
      a stream of packets stored in a tcpdump-format file named "/tmp/dump":

      <computeroutput>
	smacqq 'print srcip, dstip from pcapfile("/tmp/dump")'
      </computeroutput>

      Nested queries are also supported.  For example:

      <computeroutput>
	print srcip, dstip from (uniq srcip, dstip from pcapfile("/tmp/dump"))
      </computeroutput>
      
      "Where" clauses are supported for both boolean tests based on <,
      <=, >, >=, =, !=, or arbitrary filtering functions.

      <computeroutput>
	print dstip from pcapfile("/tmp/dump") where srcip = 128.129.1.2
      </computeroutput>

      <computeroutput>
	print dstip from pcapfile("/tmp/dump") where mask(srcip, 128.129.0.0/16)
      </computeroutput>

      Aliasing with "as" is supported:
      
      <computeroutput>
	print dstip, totalbytes from select dstip, sum(len) as totalbytes from pcapfile("/tmp/dump")
      </computeroutput>

      Extended relational algebra provides aggregate functions and the
      "group by" and "having" terms.  This syntax is supported, but with slightly
      different semantics.  For example, the following query would
      behave as it would in SQL:

      <computeroutput>
	print dstip, sum(len) from pcapfile("/tmp/dump") group
	by dstip
      </computeroutput>

      but is also the same as:

      <computeroutput>
	print dstip, sum from (groupby dstip, '--', sum, len from
	pcapfile("/tmp/dump"))
      </computeroutput>

      However the use of a function (such as "sum()") as one of the
      arguments will result in the "sum" module processing the data
      before the "print" module.  A module called in this way is
      expected to annotate the data object with a field of the same
      name as the function.  Thus, the sum field will be part of the
      object from now on.  Thus, it can also be used in subsequent
      arguments.  In addition, however, the module can cause other
      side-effects to the data.  Finally, functions can be used whether or
      not "group by" is used.

    </para>

    <para>
      SMACQ is an extensible system that the user can add modules to.
      See the <command>smacqp</command>(1) manpage for a detailed
      description of modules.  Many modules take flags which, like all
      arguments, must be separated with commas:

      <computeroutput>
	print -v, srcip, dstip from pcapfile("/tmp/dump")
      </computeroutput>&nbsp;
    </para>

  </refsect1>
  <refsect1>
    <title>BUGS</title>

    <para>
      Joins are not yet supported.  They will be supported in multiple
      forms:  joins within a buffer window, joins between
      nondecreasing streams, etc.
    </para>
  </refsect1>
  
</refentry>

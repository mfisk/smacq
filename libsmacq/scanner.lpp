%{
#define YY_NO_UNPUT 1
#include <smacq-parser.h>
#include <parser.hpp>
#include <string.h>
#define MAX_STR_CONST 1024

static char string_buf[MAX_STR_CONST];
char *yystring;
#define yysmacql__scan_string yysmacql_scan_string
#define yy_scan_string yysmacql_scan_string
#define yylex yysmacql_lex

%}

%option nounput
%option noyywrap
%option bison-locations

quote		\'
dquote		\"
space		[[:space:]]+
arithop		[\-\+\*\/]
sign		[\-\+]?
digits		[0-9e\.]
toksymbols	[\|\,\=\<\>\(\)\[\]]|{arithop}
number		{sign}{digits}+
id		[^\!\'\"\,\=\<\>\(\)[:space:]\|]+
capid		[A-Z]{id}
comment		#.*

%x xdquote
%x xquote

%%
%{
//#define SET_COLUMNS yylloc_param->first_column = (int)(yyg->yytext_r - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf);yylloc_param->last_column = yylloc_param->last_column + yyleng - 1; yylloc_param->first_line = yylloc_param->last_line = 1 
#define SET_COLUMNS yylloc_param->first_column = yylloc_param->last_column;yylloc_param->last_column = yylloc_param->last_column + yyleng - 1; yylloc_param->first_line = yylloc_param->last_line = 1 
	//fprintf(stderr, "yylex adding %d for %s.\n", strlen(yytext), yytext);
	//yylloc_param->last_column += strlen(yytext);
%}
where|WHERE	{SET_COLUMNS; return WHERE;}
until|UNTIL	{SET_COLUMNS; return UNTIL;}
union|UNION	{SET_COLUMNS; return UNION;}
from|FROM	{SET_COLUMNS; return FROM;}
group|GROUP	{SET_COLUMNS; return GROUP;}
by|BY		{SET_COLUMNS; return BY;}
as|AS		{SET_COLUMNS; return AS;}
having|HAVING	{SET_COLUMNS; return HAVING;}
"&&"|and|AND    {SET_COLUMNS; return YYAND;}
"||"|or|OR      {SET_COLUMNS; return YYOR;}
!|not|NOT       {SET_COLUMNS; return YYNOT;}
">="		{SET_COLUMNS; return YYGEQ;}
"<="		{SET_COLUMNS; return YYLEQ;}
"!="		{SET_COLUMNS; return YYNEQ;}
"=="		{SET_COLUMNS; return '=';}
":-"		{SET_COLUMNS; return YYDEFINE;}

{quote}		BEGIN(xquote);
<xquote>{
	{quote}	BEGIN(0);
	[^']+	{
			yystring = strdup(yytext);
			SET_COLUMNS;
			return YYSTRING;
		}

	}

{dquote}		yystring = string_buf; BEGIN(xdquote);
<xdquote>{
	"\\n"		*yystring++ = '\n';
	"\\r"		*yystring++ = '\r';
	"\\t"		*yystring++ = '\t';
	"\\f"		*yystring++ = '\f';
	\\\\		{
				*yystring++ = yytext[0]; 
				*yystring++ = yytext[1];
			}
	\\{dquote}	*yystring++ = yytext[1];
	{dquote}	{
				*yystring = '\0'; 
			 	yystring = strdup(string_buf);
				SET_COLUMNS;
			 	BEGIN(0); 
				return YYSTRING;
			}
	.		*yystring++ = yytext[0];
	}

{space}	{  SET_COLUMNS; }
{comment} { SET_COLUMNS; }

<<EOF>>		{ return YYSTOP; }

{toksymbols}    	{ SET_COLUMNS; return yytext[0]; }

{number}	{ 
			yystring = strdup((char *)yytext); 
			SET_COLUMNS;
			return YYNUMBER; 
	}

{id}	{ 
			yystring = strdup((char *)yytext); 
			SET_COLUMNS;
			return YYIDSTR; 
	}

{capid}	{ 
			yystring = strdup((char *)yytext); 
			SET_COLUMNS;
			return YYCAPID; 
	}

.	{ fprintf(stderr, "Unexpected character \"%s\"\n", yytext); return -1; }

%%


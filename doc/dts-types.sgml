<!doctype refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
  <!ENTITY docbook "<productname>DocBook</productname>">
  <!ENTITY sgml    "<abbrev>SGML</abbrev>">
]>

<refentry>
  <refentryinfo>
    <address>
      <email>mfisk@lanl.gov</email>
    </address>
    <author>
      <firstname>Mike</firstname>
      <surname>Fisk</surname>
    </author>
    <date>$Date: 2002/10/30 23:23:14 $</date>
  </refentryinfo>
  <refmeta>
    <refentrytitle>dts-types</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>dts-types</refname>
    <refpurpose>type module programming guide</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <funcsynopsis>
      <funcsynopsisinfo>
	#include &lt;smacq.h&gt;
      </funcsynopsisinfo>
    </funcsynopsis>
  </refsynopsisdiv>
  
  <refsect1>
    <title>DESCRIPTION</title>

    <para>
      "Flow" is an extensible component system for analyzing streams of
      structured data.  This manpage describes the API used by type
      modules in this system.
    </para>

    <para>
      By convention, types are compiled to an ELF shared library with
      a name like <filename>flowtype_x.so</filename>, where
      <classname>x</classname> is the type name.  Types modules are not
      containers for data, but merely interfaces for accessing data of
      that type.  Thus there is no private storage associated with a
      type.
    </para>

    <para>
      Many flow <firstterm>compute modules</firstterm> are polymorphic
      and have no knowledge of the internal representation of typed
      data.  They access the data through field and transform
      functions described below.  However, a type-specific compute
      module may have this knowledge.  Therefore, a type module that
      is expected to be used by type-specific modules should be
      accompanied by an include file defining the structure of the
      data.  Type-specific compute modules may then use this include
      file.
    </para>

    <refsect2>
      <title>dts_type_<replaceable>typename</replaceable>_table</title>

      <para>
	Each types module must declare a structure named
	<function>dts_type_</function><replaceable>typename</replaceable><function>_table</function> of type <structname>struct
	  dts_type_info</structname>, which is defined as follows:
      </para>
      
      <programlisting>
	struct <structname>dts_type_info</structname> {
	  <structfield>
	    int size;
	  </structfield>
	};
    </programlisting>

      <para>
	The size is the constant size, in bytes, of the data type (e.g. 1 for a char), or -1 if the data has variable size.
      </para> 
    </refsect2>

    <refsect2>
      <title>dts_type_<replaceable>typename</replaceable>_fields</title>

      <para>
	Each type module may declare a list named
	<function>dts_type_</function><replaceable>typename</replaceable><function>_fields</function> of <structname>struct
	  dts_field_descriptor</structname> elements, which are defined as follows:
      </para>
      
      <programlisting>
	struct <structname>dts_field_descriptor</structname> {
	<structfield>
	  char * type;
	</structfield><structfield>
	  char * name;
	</structfield><structfield>
	  field_getfunc_fn * getfunc;
	</structfield>
	};

	typedef int <function>field_getfunc_fn</function>(const dts_object*, void ** data, int * len);
      </programlisting>

      <para>
	Each entry in this list describes a named field in a list of
	elements of this type.  For example, the type may be a
	structure.  The <literal>type</literal> string is the type of the element named <literal>name</literal>.
	
	If the <function>getfunc</function> pointer is NULL, then it
	is assumed that this field occurs in the data immediately
	following the previous field.  The fixed-size fields in a C
	structure can be listed this way (but if you're describing a C
	struct, be aware of padding that the compiler may add to
	properly align C struct).

	If <function>getfunc</function> is non-NULL, then it
	represents a function to be called to get the pointer and size
	of this field.  Variable sized fields must provide a getfunc.
      </para>
      <refsect3>
	<title>Field access functions</title>
	
	<funcsynopsis>
	  <funcprototype>
	    <funcdef>int <function>field_getfunc_fn</function></funcdef>
	    <paramdef>        const dts_object * <parameter>datum</parameter></paramdef>
	    <paramdef>        void ** <parameter>data</parameter></paramdef>
	    <paramdef>        int *<parameter>len</parameter></paramdef>
	  </funcprototype>
	</funcsynopsis>
	  
	<para>
	  Set <parameter>*data</parameter> to point to the field in
	  <parameter>datum</parameter>.  Set
	  <parameter>*len</parameter> to the correct length.  Return 1
	  on success or 0 if the field is not present in this datum.
	</para>

      </refsect3>
    </refsect2>

    <refsect2>
      <title>dts_type_<replaceable>typename</replaceable>_transforms</title>

      <para>
	Each type module may declare a list named
	<function>dts_type_</function><replaceable>typename</replaceable><function>_transforms</function> of <structname>struct
	  dts_transform_descriptor</structname> elements, which are defined as follows:
      </para>
      
      <programlisting>
	struct <structname>dts_field_descriptor</structname> {
	<structfield>
	  char * name;
	</structfield><structfield>
	  transform_getfunc_fn * getfunc;
	</structfield>
	};

	typedef int <function>transform_getfunc_fn</function>(void * data, int len, void ** tdata, int * tlen);

      </programlisting>

      <para>
	Each entry in this list describes a named transformation that
	can be applied to data of this type.  Each type should provide
	a transform to a "string" so that the type can be printed.
	The transform is performed by calling
	<function>getfunc</function>.  Transforms allocate storage for
	the transformation and the caller must free this space when it
	is done with the transform.
      </para>

      <refsect3>
	<title>Field transform functions</title>
	
	<funcsynopsis>
	  <funcprototype>
	    <funcdef>int <function>transform_getfunc_fn</function></funcdef>
	    <paramdef>        void * <parameter>data</parameter></paramdef>
	    <paramdef>        int <parameter>len</parameter></paramdef>
	    <paramdef>        void ** <parameter>tdata</parameter></paramdef>
	    <paramdef>        int *<parameter>tlen</parameter></paramdef>
	  </funcprototype>
	</funcsynopsis>
	  
	<para>
	  Allocate new storage for a transformation of the data of
	  length <parameter>len</parameter> pointed to by
	  <parameter>*data</parameter>.  Return a pointer in
	  <parameter>*tdata</parameter> and the transformed size in
	  <parameter>*tlen</parameter>.  Return 1 on sucess or 0 if the
	  field is not present in this datum.
	</para>

      </refsect3>
    </refsect2>

  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>

    <para>smacqp(1), smacq-modules(3)</para>

  </refsect1>
  
</refentry>

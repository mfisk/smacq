%start queryline
%locations
%debug
%define api.pure
//%lex-param { YYLVAL * &yylval}

%{
void yysmacql_error(char*);
     #define    yymaxdepth yysmacql_maxdepth
     #define    yyparse yysmacql_parse
     #define    yylex   yysmacql_lex
     //#define    yyerror yysmacql_error
     #define    yylval  yysmacql_lval
     #define    yychar  yysmacql_char
     #define    yydebug yysmacql_debug
     #define    yypact  yysmacql_pact
     #define    yyr1    yysmacql_r1
     #define    yyr2    yysmacql_r2
     #define    yydef   yysmacql_def
     #define    yychk   yysmacql_chk
     #define    yypgo   yysmacql_pgo
     #define    yyact   yysmacql_act
     #define    yyexca  yysmacql_exca
     #define yyerrflag yysmacql_errflag
     #define yynerrs    yysmacql_nerrs
     #define    yyps    yysmacql_ps
     #define    yypv    yysmacql_pv
     #define    yys     yysmacql_s
     #define    yy_yys  yysmacql_yys
     #define    yystate yysmacql_state
     #define    yytmp   yysmacql_tmp
     #define    yyv     yysmacql_v
     #define    yy_yyv  yysmacql_yyv
     #define    yyval   yysmacql_val
     #define    yylloc  yysmacql_lloc
     #define yyreds     yysmacql_reds
     #define yytoks     yysmacql_toks
     #define yylhs      yysmacql_yylhs
     #define yylen      yysmacql_yylen
     #define yydefred yysmacql_yydefred
     #define yydgoto    yysmacql_yydgoto
     #define yysindex yysmacql_yysindex
     #define yyrindex yysmacql_yyrindex
     #define yygindex yysmacql_yygindex
     #define yytable     yysmacql_yytable
     #define yycheck     yysmacql_yycheck
     #define yyname   yysmacql_yyname
     #define yyrule   yysmacql_yyrule

#include <smacq-parser.h>
#include <parser.hpp>
#include <SmacqGraph.h>

static SmacqGraph * nullgraph = NULL;
SmacqGraph * Graph;
std::map<std::string, SmacqGraph *> Graphs;
#include <smacq-parser-internals.h>
%}
%defines

%type <graph> query where0 innerquery joinuntil fromstatement commonquery sqlnestedquery groupedsinglequery sqlsinglequery singlequery joins
%type <group> group0 
%type <comp> having
%type <join_list> newjoin join morejoins

m4_include(grammer.ypp)

queryline: query YYSTOP	
	   { 
#ifdef DEBUG
	   	$1->print(stderr, 0); 
#endif
		Graph = $1;
		YYACCEPT;
	   }
	| id YYDEFINE query YYSTOP
	  {
		Graphs[$1] = $3;
		Graph = NULL;
		YYACCEPT;
	  }
	| YYSTOP /* Could be a blank line */
	  {
		Graph = NULL;
		YYACCEPT;
	  }
	;

query:
	fromstatement
	| commonquery
	| commonquery '|' query
           {
	   	$$ = $1;
		graph_join($$, $3);
	   }
	;

sqlnestedquery:
	fromstatement
	| joins 
	| sqlsinglequery
	;

fromstatement: 
	sqlsinglequery FROM sqlnestedquery where0 group0
           {
	   	$$ = $3;
		graph_join($$, $4);
		if ($5.args) {
			graph_join($$, newgroup($5, $1));
		} else {
			graph_join($$, $1);
		}
	   }
	;

commonquery:
	singlequery '+' query
	   {
		$1->add_graph($3, true);
		$$ = $1;
	   }
	| joins 
	| singlequery 
	;

sqlsinglequery:
	id args0 		{ $$ = newmodule($1, $2); }
	| innerquery
	;

singlequery: 
	'(' query ')'		{ $$ = $2; }
        | WHERE boolean 	{ $$ = optimize_bools($2); }
	| groupedsinglequery where0 group0 
	{
		$$ = $2;
		if ($3.args) {
			graph_join($$, newgroup($3, $1));
		} else {
			graph_join($$, $1);
		}
	}
	;

groupedsinglequery:
	id '(' args0 ')'	{ $$ = newmodule($1, $3); }
	| id spacedargs0   	{ $$ = newmodule($1, $2); }
	;	
	
innerquery:
	'(' query ')'		{ $$ = $2; }
	| id '(' args0 ')'	{ $$ = newmodule($1, $3); }
	;

newjoin:
	innerquery word joinuntil 	{ $$ = new joinlist($2, $1, $3); }
/*
	| id word joinuntil 		{ $$ = new joinlist($2, newmodule($1, NULL), $3); }
*/
	;

joinuntil:
	null 				{ $$ = nullgraph; }
	| UNTIL boolean 		{ $$ = optimize_bools($2); }
	;

join:
	newjoin 
	| word joinuntil 		{ $$ = new joinlist($1, nullgraph, $2); }
	;

joins:
	newjoin ',' morejoins WHERE boolean 
	   {
		$1->append($3); 
                $$ = joinlist2graph($1, optimize_bools($5));
	   }
	;

morejoins:
	join
 	| join ',' morejoins 
	   { 
		$$ = $1;
		$$->append($3); 
	   }
	;

where0: 
	null 			{ $$ = nullgraph; }
        | WHERE boolean 	{ $$ = optimize_bools($2); }
	;

group0: 
	null 			{ $$.args = NULL; $$.having = NULL;}
	| GROUP BY args having 	{ $$.args = $3; $$.having = $4; }
	;

having: 
	null			{ $$ = NULL; }
	| HAVING boolean	{ $$ = $2; }
	;

%%

extern void yysmacql_scan_string(char*);

void yysmacql_error(char * msg) {
  fprintf(stderr, "%s near %s\n", msg, yytext-1);
}


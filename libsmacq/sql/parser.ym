%start queryline
%{
void yyerror(char*);

#include <smacq-parser.h>
static struct graph nullgraph = { head: NULL, tail: NULL };
static smacq_graph * Graph;
%}

%type <graph> pverbphrase from source query where 
%type <vphrase> verbphrase
%type <group> group
%type <comp> having

m4_include(grammer.y)

queryline: query YYSTOP	
	   { 
#ifdef DEBUG
	   	smacq_graph_print(stderr, $1.head, 0); 
#endif
		Graph = $1.head;
		return 0;
	   }
	;



query : verbphrase from where group
           {
	   	$$.head = ($$.tail = NULL);
	   	graph_join(&($$), $2);
		graph_join(&($$), $3);
		if ($4.args) {
			graph_join(&($$), newgroup($4, $1));
		} else {
			graph_join(&($$), newmodule($1.verb, $1.args));
		}
	   }
	| query '|' verbphrase where group
           {
	   	$$.head = ($$.tail = NULL);
	   	graph_join(&($$), $1);
		graph_join(&($$), $4);
		if ($5.args) {
			graph_join(&($$), newgroup($5, $3));
		} else {
			graph_join(&($$), newmodule($3.verb, $3.args));
		}
	   }
	| from where 
           {
	   	$$.head = ($$.tail = NULL);
	   	graph_join(&($$), $1);
		graph_join(&($$), $2);
	   }
	;

from :  null 			{ $$.head = NULL; $$.tail = NULL; } 
	| FROM source 		{ $$ = $2; }
	;

source : pverbphrase from
		        {
	   			$$.head = ($$.tail = NULL);
	   			graph_join(&($$), $2);
				graph_join(&($$), $1);
			}
	| '(' query ')'	{ $$ = $2; }
	;

where : null 		{ $$ = nullgraph; }
        | WHERE boolean { $$ = optimize_bools($2); }
	;

group : null 			{ $$.args = NULL; $$.having = NULL;}
	| GROUP BY args having 	{ $$.args = $3; $$.having = newarg(print_comparison($4), 0, NULL); }
	;

having : null			{ $$ = NULL; }
	| HAVING boolean	{ $$ = $2; }
	;

pverbphrase: verb '(' args ')' 	{ $$ = newmodule($1, $3); }
	| verb spacedargs  	{ $$ = newmodule($1, $2); }
	;

verbphrase : verb args 		{ $$ = newvphrase($1, $2); }
	| verb '(' args ')'	{ $$ = newvphrase($1, $3); }
	;

%%

extern void yy_scan_string(char*);

smacq_graph * smacq_build_query(dts_environment * tenv, int argc, char ** argv) {
  int size = 0;
  int i;
  char * qstr; 
  smacq_graph * graph;
  int res;

  parse_tenv = tenv;

  for (i=0; i<argc; i++) {
  	size += strlen(argv[i]);
  }
  size += argc;

  qstr = (char*)malloc(size);
  qstr[0] = '\0';
  	
  for (i=0; i<argc; i++) {
  	strcatn(qstr, size, argv[i]);
  	strcatn(qstr, size, " ");
  }

  /* LOCK */
  pthread_mutex_lock(&local_lock);

  yy_scan_string(qstr);
  //fprintf(stderr, "parsing buffer: %s\n", qstr); 

  res = yyparse();

  graph = Graph;

  /* UNLOCK */
  pthread_mutex_unlock(&local_lock);

  if (res) {
    fprintf(stderr, "smacq_build_query: error parsing query: %s\n", qstr);
    return NULL;
  }

  if (!graph) {
    fprintf(stderr, "unknown parse error\n");
  }

  return graph;
}

void yyerror(char * msg) {
  fprintf(stderr, "%s near %s\n", msg, yytext-1);
}


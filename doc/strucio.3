.\" $Header: /aolnet/dev/src/CVS/sgml/docbook-to-man/cmd/docbook-to-man.sh,v 1.1.1.1 1998/11/13 21:31:59 db3l Exp $
.\"
.\"	transcript compatibility for postscript use.
.\"
.\"	synopsis:  .P! <file.ps>
.\"
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
'\" t 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n  
.TH "strucio" "3" 
.SH "NAME" 
strucio \(em Reading/writing (sets of) structured files 
.SH "SYNOPSIS" 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
#include <strucio.h> 
 
.fi 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
-l smacq 
 
.fi 
.SH "DESCRIPTION" 
.PP 
The strucio library provides read or write access to sequences 
of files.  Callback functions can be registered to produce 
sequences of file names ot use, and to handle per-file headers. 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBstruct strucio * \fBstrucio_init\fP\fR( 
.fi 
.PP 
Return an initialized strucio. 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBvoid \fBstrucio_close\fP\fR( 
\fB       struct strucio *\fR); 
.fi 
.PP 
Close all open files and free the struct strucio. 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBvoid \fBstrucio_register_file\fP\fR( 
\fB       struct strucio *\fR, 
\fB       char * filename\fR); 
.fi 
.PP 
Register a single file to read or write.  Other register_file 
functions are provided below to specify sequences of files to 
read. 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBvoid \fBstrucio_register_newfile\fP\fR( 
\fB       struct strucio *\fR, 
\fB       strucio_newfile_fn *\fR, 
\fB       void * user\fR); 
.fi 
.PP 
Register a function that is to be called any time a new file is opened. 
The user pointer will be passed as an argument when the callback is made. 
The function can read or write file headers as needed. 
The registered function should return 0 on success 
and -1 to reject the file. 
 
.SH "READING" 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBvoid \fBstrucio_set_read_type\fP\fR( 
\fB       struct strucio *\fR, 
\fB       enum file_read_type read_type\fR); 
.fi 
.PP 
Set the read type to COPY, MMAP, or EITHER (default). 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBvoid * \fBstrucio_read\fP\fR( 
\fB       struct strucio *\fR, 
\fB       void * buf\fR, 
\fB       int len\fR); 
.fi 
.PP 
Return a pointer to a buffer containing len bytes of new data. 
The buf pointer must be large enough to hold len bytes. 
The return value, however, may not be buf if the data could 
be more efficiently provided elsewhere (e.g. memory-mapped I/O). 
NULL is returned on failure (end of data). 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBvoid * \fBstrucio_read_mmap\fP\fR( 
\fB       struct strucio *\fR, 
\fB       int len\fR); 
.fi 
.PP 
Return a pointer to a buffer containing len bytes of new data. 
Returns buf on success and NULL on failure (end of data). 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBvoid * \fBstrucio_read_copy\fP\fR( 
\fB       struct strucio *\fR, 
\fB       void * buf\fR, 
\fB       int len\fR); 
.fi 
.PP 
Fill the given buffer with len bytes of new data. 
Returns buf on success and NULL on failure (end of data). 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBvoid \fBstrucio_register_filelist\fP\fR( 
\fB       struct strucio *\fR, 
\fB       strucio_filelist_fn *\fR, 
\fB       void * user\fR); 
.fi 
.PP 
Register a function that returns new filenames, one per call. 
The user pointer will be passed as an argument when the callback is made. 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBvoid \fBstrucio_register_filelist_args\fP\fR( 
\fB       struct strucio *\fR, 
\fB       int argc\fR, 
\fB       char ** argv\fR); 
.fi 
.PP 
Register a builtin function that returns new filenames, one per call from the 
given argument vector. 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBvoid \fBstrucio_register_filelist_stdin\fP\fR( 
\fB       struct strucio *\fR); 
.fi 
.PP 
Register a builtin function that returns new filenames, one 
per call from standard input. 
 
.SH "WRIITNG" 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBint \fBstrucio_write\fP\fR( 
\fB       struct strucio *\fR, 
\fB       void * buf\fR, 
\fB       int len\fR); 
.fi 
.PP 
Write-out the given buffer.  Returns 0 on success. 
 
.PP 
.nf 
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.sp 1 
\fBvoid \fBstrucio_set_rotate\fP\fR( 
\fB       struct strucio *\fR, 
\fB       long long size\fR); 
.fi 
.PP 
Set an upper-bound on the size of output files.  Files will be 
created with numerical, increasing, sufix. 
 
.SH "SEE ALSO" 
.PP 
bytehash(3), smacq-modules(3) 
.\" created by instant / docbook-to-man, Mon 10 May 2004, 11:56 

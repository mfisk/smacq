<!doctype refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
  <!ENTITY docbook "<productname>DocBook</productname>">
  <!ENTITY sgml    "<abbrev>SGML</abbrev>">
]>

<refentry>
  <refentryinfo>
    <address>
      <email>mfisk@lanl.gov</email>
    </address>
    <author>
      <firstname>Mike</firstname>
      <surname>Fisk</surname>
    </author>
    <date>$Date: 2002/12/28 04:21:11 $</date>
  </refentryinfo>
  <refmeta>
    <refentrytitle>smacqq</refentrytitle>
    <manvolnum>1</manvolnum>
  </refmeta>
  <refnamediv>
    <refname>smacqq</refname>
    <refpurpose>query tool using SMACQ</refpurpose>
  </refnamediv>
  <refsect1>
    <title>DESCRIPTION</title>

    <para>
      "Smacqq" is an extensible tool for performing queries on streams of data.
       Users with a familiarity of SQL will immediately be comfortable using the
      basic features of the system.  However, there are additional
      object-relational and extensibility features that are described below.
    </para>

    <para>
      The primary difference from standard databases, is that data is
      not stored in preloaded tables, but is instead produced by data
      source modules.  Also, the select operation does not
      automatically print fields.  If printable output is desired, use
      the <command>print</command> command.
    </para>

    <para>
      The following example prints the "srcip" and "dstip" fields from
      a stream of packets stored in a tcpdump-format file named "/tmp/dump":

      <computeroutput>
	smacqq 'print srcip, dstip from pcapfile("/tmp/dump")'
      </computeroutput>
      
    </para>

    <para>
      Nested queries are also supported.  For example:

      <computeroutput>
	smacqq 'print srcip, dstip from (uniq srcip, dstip from pcapfile("/tmp/dump"))'
      </computeroutput>
      
    </para>

    <para>
      "Where" clauses are supported:

      <computeroutput>
	smacqq 'print dstip from pcapfile("/tmp/dump") where srcip = 128.129.1.2'
      </computeroutput>
    </para>

    <para>
      Extended relational algebra provides aggregate functions and the
      "group by" term.  This syntax is supported, but with slightly
      different semantics.  For example, the following query would
      behave as it would in SQL:

      <computeroutput>
	smacqq 'print dstip, sum(len) from pcapfile("/tmp/dump") group
	by dstip'
      </computeroutput>
    </para>

    <para>
      SMACQ is an extensible system that the user can add modules to.
      See the <command>smacqp</command>(1) manpage for a detail
      description of modules.
    </para>

  </refsect1>
  <refsect1>
    <title>BUGS</title>

    <para>
      Joins are not yet supported.
    </para>
  </refsect1>
  
</refentry>

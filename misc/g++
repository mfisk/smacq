#!/bin/sh

# This is a wrapper for g++ that tries to statically link any libraries
# that it can, with some specific exceptions.

defaultdirs=`ld --verbose | grep SEARCH_DIR | sed -e 's/SEARCH_DIR("=*//g' -e 's/");//g'`
dirs=""
args=`basename $0`" "

echo "Looking for static versions of libraries" 1>&2

findlib() {
	lib=`basename "$1"`
	dir=`dirname "$1"`

	case $lib in 
	   libc|libpthread|libdl|libintl|libstdc++|libgcc_s)
			echo $lib | sed 's/lib/-l/'
			return 0
			;;
	esac

	for d in $dir $dirs $defaultdirs; do 
		if [ -r $d/${lib}.a ]; then
			# Replace -l argument with explicit .a file
			echo "$d/${lib}.a"
			echo "Using $d/${lib}.a for $lib" 1>&2

			if [ -r $d/$lib.so ]; then
				root=`ldd $d/$lib.so | grep = | cut -d\  -f3 `
				for dep in $root; do
					echo "Recurse from $lib to $dep" 1>&2
					sublib $dep	
				done
                        fi
			return 
		fi
	done

        #No static version
	echo "-l$lib"
}

sublib() {
	case $1 in
		/*.so*)
			root=`echo "$1" | sed 's/\.so.*//'`
			findlib $root $1
			;;
		/*.dylib)
			root=`echo "$1" | sed 's/\.dylib//'`
			findlib $root $1
			;;
		-l*)
			root=`echo "$1" | sed 's/^-l/lib/'`
			findlib $root 
			;;
		-L*)
			echo "$1"
			dir=`echo "$1" | sed 's/^-L//'`
			dirs="$dir $dirs"
			;;
		*)
			echo "$1"
			;;
	esac
}

args="$args"`for word in "$@"; do
	sublib $word
done`

# Remove our directory from the path
for f in `echo $PATH | sed 's/:/ /g'`; do 
	expr $f : '.*\/misc$' > /dev/null || newpath="$newpath$f:"
done
#echo $newpath 1>&2
PATH=$newpath
		
#echo "$args"
set -x
$args
